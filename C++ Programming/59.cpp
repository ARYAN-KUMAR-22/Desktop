// C++ ENCAPSULATION

/*

	ENCAPSULATION
	
	THE MEANING OF ENCAPSULATION, IS TO MAKE SURE THAT "SENSITIVE" DATA IS HIDDEN FROM USERS.
	TO ACHIEVE THIS, YOU MUST DECLARE CLASS VARIALBES/ATTRIBUTES AS private ( CANNOT BE ACCESSED FROM OUTSIDE THE CLASS). 
	IF YOU WANT OTHERS TO READ OR MODIFY THE VALUE OF A PRIVATE MAMBER, YOU CAN PROVIDE PUBLIC get AND set METHODS.


	ACCESS PRIVATE MEMBERS : 
	TO ACCESS A PRIVATE ATTRIBUTES, USE PUBLIC "get" AND "set" METHODS.

*/

#include <iostream>
using namespace std;

class Employee
{
	private : 
		// Private attribute
		int salary;

	public : 
		// Setter
		void setSalary( int s)
		{
			salary = s;
		}
		// Getter
		int getSalary()
		{
			return salary;
		}
};

int main()
{
	Employee myObj;
	myObj.setSalary(50000);

	cout << myObj.getSalary();

	return 0;
}	


/*

	EXAMPLE EXPLAINED

	THE salary ATTRIBUTE IS PRIVATE, WHICH HAVE RESTRICTED ACCESS.

	THE PUBLIC setSalary() METHOD TAKES A PARAMETER (S) AND ASSIGN IT TO THE salary ATTRIBUTE (salary = s).

	THE PUBLIC getSalary() METHOD RETURNS THE VALUE OF THE PRIVATE salary ATTRIBUTE.

	INSIDE main(), WE CREATE AN OBJECT OF THE Employee CLASS. NOW WE CAN USE THE setSalray() METHOD TO SET THE VALUE OF THE PRIVATE ATTRIBUTE TO 50000. THEN WE CALL THE getSalary() METHOD ON THE OBJECT TO RETURN THE VALUE.


	WHY ENCAPSULATION ?
	
	-> IT IS CONSIDERED GOOD PRACTICE TO DECLARE YOUR CLASS ATTRIBUTES AS PRIVATE ( AS OFTEN AS YOU CAN). ENCAPSULATION ENSURES BETTER CONTROL OF YOUR DATA, BECAUSE YOU (OR OTHERS) CAN CHANGE ONE PART OF THE CODE WITHOUT AFFECTING OTHER PARTS.

	-> INCREASED SECURITY OF DATA.

*/
